# SPDX-FileCopyrightText: 2022 - 2024 Ali Sajid Imami
#
# SPDX-License-Identifier: Apache-2.0
# SPDX-License-Identifier: MIT

---
name: Continuous integration
on:
    push:
    pull_request:
        branches:
            - main
        types:
            - closed
    workflow_dispatch:
concurrency:
    group: ${{github.event.ref}}
    cancel-in-progress: true
env:
    GIST_KEY: 185618f862b98debb8b034c34e83173d # pragma: allowlist secret
    RUST_BACKTRACE: 1
    MINIMUM_WAIT: 3
    MAXIMUM_WAIT: 10
jobs:
    ci:
        runs-on: ${{matrix.os}}-latest
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'
        outputs:
            result: ${{steps.result.outputs.result}}
        strategy:
            fail-fast: false
            matrix:
                rust:
                    - stable
                    - beta
                    - nightly
                    - 1.72.1 # MSRV
                os:
                    - windows
                    - ubuntu
                    - macos
                include:
                    - os: windows
                      logo: windows
                    - os: ubuntu
                      logo: ubuntu
                    - os: macos
                      logo: apple
                    - rust: 1.72.1 # MSRV
                      label: msrv
                    - rust: stable
                      label: stable
                    - rust: beta
                      label: beta
                    - rust: nightly
                      label: nightly
        steps:
            - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
            - name: Install Rust
              uses: dtolnay/rust-toolchain@master
              with:
                toolchain: ${{matrix.rust}}
                components: rustfmt, clippy
            - name: Install nightly Rust
              uses: dtolnay/rust-toolchain@nightly
              with:
                toolchain: nightly
                components: rustfmt, clippy
            - name: Cache dependencies
              uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # v2.7.8
            - name: Cargo Build
              run: cargo build --verbose
            - name: Cargo Test
              run: cargo test
            - name: Cargo Format
              run: cargo +nightly fmt --all -- --check
            - name: Cargo Lint
              run: cargo clippy -- -D warnings
            - name: Wait before badge creation
              uses: AliSajid/random-wait-action@61cd084eea9edc3700d94b6c8e1bf28291f0a177 # v2.9.0
              with:
                minimum: ${{env.MINIMUM_WAIT}}
                maximum: ${{env.MAXIMUM_WAIT}}
            - name: Create Awesome Badge - Success
              uses: schneegans/dynamic-badges-action@e9a478b16159b4d31420099ba146cdc50f134483 # v1.7.0
              if: success()
              with:
                auth: ${{secrets.GIST_SECRET}}
                gistID: ${{env.GIST_KEY}}
                filename: ${{matrix.os}}-${{matrix.label}}.json
                label: Build
                namedLogo: ${{matrix.logo}}
                message: Succeeded
                color: green
            - name: Create Awesome Badge - Failure
              uses: schneegans/dynamic-badges-action@e9a478b16159b4d31420099ba146cdc50f134483 # v1.7.0
              if: failure()
              with:
                auth: ${{secrets.GIST_SECRET}}
                gistID: ${{env.GIST_KEY}}
                filename: ${{matrix.os}}-${{matrix.label}}.json
                namedLogo: ${{matrix.logo}}
                label: Build
                message: Failed
                isError: true
            - name: Set Result
              if: always()
              id: result
              run: echo "result=${{job.status}}" >> "$GITHUB_OUTPUT"
    generate_code_coverage:
        uses: ./.github/workflows/code_coverage.yaml
        needs: [ci]
        secrets: inherit # pragma: allowlist secret
    generate_mdbook:
        uses: ./.github/workflows/deploy_mdbook.yaml
        needs: [ci]
        secrets: inherit # pragma: allowlist secret
    get-next-version:
        uses: ./.github/workflows/get_next_version.yaml
        needs: [ci]
        secrets: inherit # pragma: allowlist secret
    semantic-release:
        needs: [ci, get-next-version]
        if: ${{needs.get-next-version.outputs.new-release-published == 'true'}}
        uses: ./.github/workflows/release.yaml
        secrets: inherit # pragma: allowlist secret
